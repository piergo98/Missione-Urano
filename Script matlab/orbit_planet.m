% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~function orbit_planet% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%{  This function solves the inertial two-body problem in three dimensions  numerically using the RKF4(5) method.    G             - universal gravitational constant (km^3/kg/s^2)  m1,m2         - the masses of the two bodies (kg)  m             - the total mass (kg)  t0            - initial time (s)  tf            - final time (s)  R1_0,V1_0     - 3 by 1 column vectors containing the components of tbe                  initial position (km) and velocity (km/s) of m1  R2_0,V2_0     - 3 by 1 column vectors containing the components of the                  initial position (km) and velocity (km/s) of m2  y0            - 12 by 1 column vector containing the initial values                  of the state vectors of the two bodies:                   [R1_0; R2_0; V1_0; V2_0]  t             - column vector of the times at which the solution is found  X1,Y1,Z1      - column vectors containing the X,Y and Z coordinates (km)                  of m1 at the times in t  X2,Y2,Z2      - column vectors containing the X,Y and Z coordinates (km)                  of m2 at the times in t  VX1, VY1, VZ1 - column vectors containing the X,Y and Z components                  of the velocity (km/s) of m1 at the times in t  VX2, VY2, VZ2 - column vectors containing the X,Y and Z components                  of the velocity (km/s) of m2 at the times in t  y             - a matrix whose 12 columns are, respectively,                  X1,Y1,Z1; X2,Y2,Z2; VX1,VY1,VZ1; VX2,VY2,VZ2  XG,YG,ZG      - column vectors containing the X,Y and Z coordinates (km)                  the center of mass at the times in t    User M-function required:   rkf45  User subfunctions required: rates, output%}% ----------------------------------------------------------------------clc; clear all; close allG = 6.67259e-20;%...Input data:m2   = 5.97219e24; %massa terram1   = 1.989e30;  %massa solem3   = 6.39e23 ; %massa martet0   = 0;tf   = 3600*24*1000;% data 25 gennaio 2022R1_0 = [   0;    0;   0];   %posizione soleR2_0 = [-8.378215106670664e07;    1.211142487691607e08;   -5.738024317257106e03]; %posizione terra relativa a soleR3_0 = [-8.354991483488896E+07;  -2.091217078874986E+08;  -2.333241163106546E+06]; %posizione marte relativa a soleV1_0 = [  0;  0;  0];V2_0 = [   -2.498829281983491e01;   -1.705026699673997e01;   1.930272287113510e-03];V3_0 = [ 2.341088356014266E+01;-6.909196613332622E+00;-7.190678817326539E-01];%...End input datay0 = [R1_0; R2_0;R3_0; V1_0; V2_0;V3_0];%...Integrate the equations of motion:[t,y] = rkf45(@rates, [t0 tf], y0);    %y column vector containing the position and velocity vectors of the system at time t%...Output the results:outputreturn% ~~~~~~~~~~~~~~~~~~~~~~~~function dydt = rates(t,y)% ~~~~~~~~~~~~~~~~~~~~~~~~%{  This function calculates the accelerations in Equations 2.19  r      - magnitude of the relative position vector   %}% ------------------------R1   = [y(1); y(2); y(3)];    %position vectors of m1 & m2 & m3R2   = [y(4); y(5); y(6)];R3   = [y(7); y(8);y(9)];V1   = [y(10); y(11); y(12)]; % velocity vectors of m1 & m2 &m3V2   = [y(13); y(14); y(15)];V3   = [y(16); y(17); y(18)];r_1    = norm(R2 - R1);   %norma con corpo principaler_2    = norm (R3-R1);A1   = G*m2*(R2 - R1)/r_1^3;   %acceleration vectors of m1 & m2 & m3A2   = G*m1*(R1 - R2)/r_1^3;A3   = G*m3*(R3 - R1)/r_2^3;A4   = G*m1*(R1-R3)/r_2^3;    %accelerazione di m3 rispetto al soledydt = [V1; V2; V3; A1; A2; A4];  %column vector containing the velocity and acceleration vectors of the system at time tend %rates% ~~~~~~~~~~~~~~~~~~% ~~~~~~~~~~~~~function output% ~~~~~~~~~~~~~%{  This function calculates the trajectory of the center of mass and  plots  (a) the motion of m1, m2 and G relative to the inertial frame  (b) the motion of m2 and G relative to m1  (c) the motion of m1 and m2 relative to G  User sub function required: common_axis_settings%}% -------------%...Extract the particle trajectories:X1 = y(:,1); Y1 = y(:,2); Z1 = y(:,3);X2 = y(:,4); Y2 = y(:,5); Z2 = y(:,6);X3 = y(:,7); Y3 = y(:,8); Z3 = y(:,9);%...Locate the center of mass at each time step:XG = []; YG = []; ZG = [];for i = 1:length(t)    XG = [XG; (m1*X1(i) + m2*X2(i)+m3*X3(i))/(m1 + m2+m3 )];    YG = [YG; (m1*Y1(i) + m2*Y2(i)+m3*Y3(i))/(m1 + m2+m3 )];    ZG = [ZG; (m1*Z1(i) + m2*Z2(i)+m3*Z3(i))/(m1 + m2+m3 )];end%...Plot the trajectories:figure (1)title('Figure 1: Motion relative to the inertial frame')hold onplot3(X1, Y1, Z1, '-r')plot3(X2, Y2, Z2, '-g')plot3(X3, Y3, Z3, '-g')plot3(XG, YG, ZG, '-b')comet3(X1, Y1, Z1);comet3(X2, Y2, Z2);comet3(X3, Y3, Z3);text(X1(1), Y1(1), Z1(1), '1', 'color', 'r')text(X2(1), Y2(1), Z2(1), '2', 'color', 'g')text(X3(1), Y3(1), Z3(1), '3', 'color', 'g')text(XG(1), YG(1), ZG(1), 'G', 'color', 'b')end %outputend %twobody3d% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~