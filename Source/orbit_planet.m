% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~function orbit_planet% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~%{  This function solves the inertial two-body problem in three dimensions  numerically using the RKF4(5) method.    G             - universal gravitational constant (km^3/kg/s^2)  m1,m2         - the masses of the two bodies (kg)  m             - the total mass (kg)  t0            - initial time (s)  tf            - final time (s)  R1_0,V1_0     - 3 by 1 column vectors containing the components of tbe                  initial position (km) and velocity (km/s) of m1  R2_0,V2_0     - 3 by 1 column vectors containing the components of the                  initial position (km) and velocity (km/s) of m2  y0            - 12 by 1 column vector containing the initial values                  of the state vectors of the two bodies:                   [R1_0; R2_0; V1_0; V2_0]  t             - column vector of the times at which the solution is found  X1,Y1,Z1      - column vectors containing the X,Y and Z coordinates (km)                  of m1 at the times in t  X2,Y2,Z2      - column vectors containing the X,Y and Z coordinates (km)                  of m2 at the times in t  VX1, VY1, VZ1 - column vectors containing the X,Y and Z components                  of the velocity (km/s) of m1 at the times in t  VX2, VY2, VZ2 - column vectors containing the X,Y and Z components                  of the velocity (km/s) of m2 at the times in t  y             - a matrix whose 12 columns are, respectively,                  X1,Y1,Z1; X2,Y2,Z2; VX1,VY1,VZ1; VX2,VY2,VZ2  XG,YG,ZG      - column vectors containing the X,Y and Z coordinates (km)                  the center of mass at the times in t    User M-function required:   rkf45  User subfunctions required: rates, output%}% ----------------------------------------------------------------------clc; clear all; close alladdpath("./Script matlab/")G = 6.67259e-20;%...Input data:m1   = 1.989e30;   %massa solem2   = 5.97219e24; %massa terram3   = 6.39e23 ;   %massa martem4   = 1.898e27;  %massa giovem5   = 5.683e26;  %massa saturnom6   = 8.681e25;  %massa uranot0   = 0;tf   = 3600*24*365;% data 25 gennaio 2022R1_0 = [   0;    0;   0];   %posizione soleR2_0 = [-8.378215106670664e07;    1.211142487691607e08;   -5.738024317257106e03]; %posizione terra relativa a soleR3_0 = [-8.354991483488896E+07;  -2.091217078874986E+08;  -2.333241163106546E+06]; %posizione marte relativa a soleR4_0 = [ 7.057853950602041E+08;  -2.417014841465294E+08;  -1.478681187121208E+07]; %posizione giove relativa al soleR5_0 = [1.054287489823438E+09;   -1.043019212917051E+09;  -2.382298015915138E+07]; %posizione saturno relativa al soleR6_0 = [2.144082886341967E+09;   2.026042338025191E+09;   -2.026006712557590E+07]; %posizione urano relativa al soleV1_0 = [  0;  0;  0];V2_0 = [   -2.498829281983491e01;   -1.705026699673997e01;   1.930272287113510e-03];V3_0 = [ 2.341088356014266E+01;-6.909196613332622E+00;-7.190678817326539E-01];V4_0 = [ 4.082071940754254E+00; 1.298794765405250E+01;-1.452910907038971E-01];V5_0 = [ 6.259709202369010E+00; 6.858725307088332E+00; -3.680033774260312E-01];V6_0 = [-4.723908516419683E+00; 4.645281297715083E+00; 7.853521009690834E-02];%...End input datay0 = [R1_0; R2_0;R3_0; R4_0;R5_0;R6_0; V1_0; V2_0;V3_0;V4_0;V5_0;V6_0];%...Integrate the equations of motion:[t,y] = rkf45(@rates, [t0 tf], y0);    %y column vector containing the position and velocity vectors of the system at time t%...Output the results:outputreturn% ~~~~~~~~~~~~~~~~~~~~~~~~function dydt = rates(t,y)% ~~~~~~~~~~~~~~~~~~~~~~~~%{  This function calculates the accelerations in Equations 2.19  r      - magnitude of the relative position vector   %}% ------------------------R1   = [y(1); y(2); y(3)];    %position vectors of m1 & m2 & m3R2   = [y(4); y(5); y(6)];R3   = [y(7); y(8);y(9)];R4   = [y(10); y(11); y(12)];R5   = [y(13); y(14); y(15)];R6   = [y(16); y(17); y(18)];V1   = [y(19); y(20); y(21)]; % velocity vectors of m1 & m2 &m3 &m4V2   = [y(22); y(23); y(24)];V3   = [y(25); y(26); y(27)];V4   = [y(28); y(29); y(30)];V5   = [y(31); y(32); y(33)];V6   = [y(34); y(35); y(36)];%norma con corpo principaler_1    = norm(R2 - R1);   %distanza sole terrar_2    = norm (R3-R1);   %distanza sole marter_3    =norm (R4-R1);   % distanza sole giover_4   =norm (R5-R1);   %distanza sole saturnor_5   =norm (R6-R1);   %distanza sole uranoA1   = G*m2*(R2 - R1)/r_1^3;   %accelerazione soleA2   = G*m1*(R1 - R2)/r_1^3;   %accelerazione terraA3   = G*m1*(R1-R3)/r_2^3;    %accelerazione marteA4   = G*m1*(R1-R4)/r_3^3;  %accelerazione gioveA5  = G*m1*(R1-R5)/r_4^3;    %accelerazione saturnoA6  = G*m1*(R1-R6)/r_5^3;   %accelerazione uranodydt = [V1; V2; V3;V4;V5;V6; A1; A2; A3; A4;A5;A6];  %column vector containing the velocity and acceleration vectors of the system at time tend %rates% ~~~~~~~~~~~~~~~~~~% ~~~~~~~~~~~~~function output% ~~~~~~~~~~~~~%{  This function calculates the trajectory of the center of mass and  plots  (a) the motion of m1, m2 and G relative to the inertial frame  (b) the motion of m2 and G relative to m1  (c) the motion of m1 and m2 relative to G  User sub function required: common_axis_settings%}% -------------%...Extract the particle trajectories:X1 = y(:,1); Y1 = y(:,2); Z1 = y(:,3);X2 = y(:,4); Y2 = y(:,5); Z2 = y(:,6);X3 = y(:,7); Y3 = y(:,8); Z3 = y(:,9);X4 = y(:,10);Y4 = y(:,11);Z4 = y(:,12); X5 = y(:,13);Y5 = y(:,14);Z5 = y(:,15); X6 = y(:,16);Y6 = y(:,17);Z6 = y(:,18); % % % %...Locate the center of mass at each time step:M_tot = m1+m2+m3+m4+m5+m6;XG = []; YG = []; ZG = [];for i = 1:length(t)    XG = [XG; (m1*X1(i) + m2*X2(i)+m3*X3(i)+m4*X4(i)+m5*X5(i)+m6*X6(i))/(M_tot )];    YG = [YG; (m1*Y1(i) + m2*Y2(i)+m3*Y3(i)+m4*Y4(i)+m5*Y5(i)+m6*Y6(i))/(M_tot )];    ZG = [ZG; (m1*Z1(i) + m2*Z2(i)+m3*Z3(i)+ m4*Z4(i)+m5*Z5(i)+m6*Z6(i))/(M_tot )];end%...Plot the trajectories:figure (1)title('Figure 1: Motion relative to the inertial frame')hold onplot3(X1, Y1, Z1, '-r')plot3(X2, Y2, Z2, '-g')plot3(X3, Y3, Z3, '-g')plot3(X4, Y4, Z4, '-g')plot3(X5, Y5, Z5, '-g')plot3(X6, Y6, Z6, '-g')xlim([-1e10 1e10])ylim([-1e10 1e10])zlim([-1e10 1e10])%plot trajectory planetcomet3(X1, Y1,Z1); %suncomet3(X2, Y2,Z2); %earthcomet3(X3, Y3,Z3); %marscomet3(X4, Y4,Z4); %jupitercomet3(X5, Y5,Z5); %saturncomet3(X6, Y6,Z6); %uranustext(X1(1), Y1(1), Z1(1), 'sun', 'color', 'r')text(X2(1), Y2(1), Z2(1), 'earth', 'color', 'g')text(X3(1), Y3(1), Z3(1), 'mars', 'color', 'g')text(X4(1), Y4(1), Z4(1), 'jupiter', 'color', 'g')text(X5(1), Y5(1), Z5(1), 'saturn', 'color', 'g')text(X6(1), Y6(1), Z6(1), 'uranus', 'color', 'g')text(XG(1), YG(1), ZG(1), 'G', 'color', 'b')end %outputend %twobody3d% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~